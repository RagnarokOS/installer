#!/bin/ksh

# Main installer script.
# $Ragnarok: ragnarok-install,v 1.62 2024/08/20 18:29:02 lecorbeau Exp $

set -e

. /usr/lib/ragnarok-installer/funcs

CONF=${CONF:-install.conf}
ARG="$1"
INSTALLTYPE=${INSTALLTYPE:-netinstall}
TMP=$(mktemp -d -p /tmp ragnarok-install.XXXXXXXXXX)
# Parse config values
MIRROR="https://github.com/RagnarokOS/distrib/releases/download/"
VERSION="01"
URL="${MIRROR}${VERSION}"

# Never download stuff off the internet as the root user.
# I take no credit for this function. All credit goes to
# Antoine Jacoutot, who wrote OpenBSD's syspatch(1).
unpriv() {
	local _file=$2 _ret=0 _user=_apt

	if [[ $1 == -f && -n ${_file} ]]; then
		# shellcheck disable=SC2188
		>${_file}
		chown "${_user}" "${_file}"
		chmod 0711 "${TMP}"
		shift 2
	fi
	(($# >= 1))

	su -s /bin/sh ${_user} -c "$@" || _ret=$?

	[[ -n ${_file} ]] && chown root "${_file}"

	return ${_ret}
}

# Actually partition the device
part_dev() {
	local _dev _mode _root _home _swap

	_dev=$(get_val Device "$CONF")
	_mode=$(get_val Bootmode "$CONF")
	_root=$(get_val Root "$CONF")
	_home=$(get_val Home "$CONF")
	_swap=$(get_val Swap "$CONF")

	# Home may be left empty to use the remaining space, so
	# handle it properly.
	if [[ -z $_home ]]; then
		_homsesize="+"
	else
		_homesize="${_home}"
	fi

	# Wipe device
	sfdisk --delete "$_dev"

	# Set the proper part table (mbr for bios, GPT for EFI).
	case "$_mode" in
		bios)
			(echo o) | fdisk "$_dev"
			;;
		efi)
			(echo g) | fdisk "$_dev"
			;;
	esac

	case "$_mode" in
		bios)	sfdisk -A "$_dev" 1
			;;
		efi)	sfdisk --part-type "$_dev" 1 U
			;;
	esac

	printf '%s\n' "start=2048, size=500M, type=0x0C
	size=${_swap}, type=S
	size=${_root}, type=L
	size=${_homesize}, type=L" | sfdisk "${_dev}"

	# Set bootable flag on partition 1.
	case "$_mode" in
		bios)	sfdisk -A "$_dev" 1
			;;
		efi)	sfdisk --part-type "$_dev" 1 U
			;;
	esac
}

# Create filesystems and mount the device
mount_dev() {
	local _dev _mode

	_dev=$(get_val Device "$CONF")
	_mode=$(get_val Bootmode "$CONF")

	mkfs.vfat -F 32 "${_dev}1"
	mkswap "${_dev}2"
	# mkfs will ask to proceed anyway unless -F is used.
	mkfs.ext4 -F "${_dev}3"
	mkfs.ext4 -F "${_dev}4"

	swapon "${_dev}2"
	mount -t ext4 -o errors=remount-ro "${_dev}3" /mnt
	mkdir -p /mnt/{boot,home}
	mount -t ext4 -o defaults "${_dev}4" /mnt/home
	case "$_mode" in
		bios)
			mount -t vfat -o umask=0077,noexec,nosuid,nodev "${_dev}1" /mnt/boot
			;;
		efi)
			mkdir -p /mnt/boot/efi
			mount -t vfat -o umask=0077,noexec,nosuid,nodev "${_dev}1" /mnt/boot/efi
			;;
	esac
}

# Wrapper function. Ask if the installer should proceed with partitioning the device.
mk_part() {
	local _dev _resp

	_dev=$(get_val Device "$CONF")

	read -r _resp?"The following device will be formatted: ${_dev}. All data will be erased. Proceed? (Y/n): "
	case "$_resp" in
		N|n)
			msg "Exiting installer. Start again..."
			exit 1
			;;
		Y|y)
			part_dev
			mount_dev
			;;
	esac
}

# run mkconf unless arg 1 is -a/--auto
run_mkconf() {
	if [[ -z $ARG ]]; then
		mkconf
	fi
}

# Run the appropriate installer script.
do_install() {
	# We'll handle the other types of install (offline, etc...) later.
	case "$INSTALLTYPE" in
		netinstall)
			netinstall/install
			;;
		offline)
			msg "Not supported yet..."
			do_install
			;;
		*)
			netinstall/install
			;;
	esac
}

# Finishing touch
finish() {
	local _resp

	read -r _resp?"Installation complete. Type r (to reboot) or e (to exit and stay in the live session) then Return. "

	case "$_resp" in
		r)	loginctl reboot
			;;
		e)	exit 0
			;;
		*)	loginctl reboot
			;;
	esac
}

main() {
	run_mkconf
	part_dev
	mount_dev
	do_install
	finish
}

main 2>&1 | tee install.log
/usr/bin/mkdir -p /mnt/var/messages
/usr/bin/cp install.log /mnt/var/messages/
finish
