#!/bin/ksh

# Main installer script.
# $Ragnarok: ragnarok-install,v 1.13 2024/06/24 15:55:54 lecorbeau Exp $

set -e

TMP=$(mktemp -d -p /tmp ragnarok-install.XXXXXXXXXX)
# Parse config values
CODENAME=$(awk '/Codename/ { print $3 }' install.conf)
FLAVOUR=$(awk '/Flavour/ { print $3 }' install.conf)
VARIANT=$(awk '/Variant/ { print $3 }' install.conf)
COMPONENTS=$(awk '/Components/ { print $3 }' install.conf)
MIRROR=$(awk '/Mirror/ { print $3 }' install.conf)
VERSION=$(awk 'Version/ { print $3 }' install.conf)
URL="${MIRROR}${VERSION}"

# Never download stuff off the internet as the root user.
# I take no credit for this function. All credit goes to
# Antoine Jacoutot, who wrote OpenBSD's syspatch(1).
unpriv() {
	local _file=$2 _ret=0 _user=_apt

	if [[ $1 == -f && -n ${_file} ]]; then
		# shellcheck disable=SC2188
		>${_file}
		chown "${_user}" "${_file}"
		chmod 0711 "${TMP}"
		shift 2
	fi
	(($# >= 1))

	su -s /bin/sh ${_user} -c "$@" || _ret=$?

	[[ -n ${_file} ]] && chown root "${_file}"

	return ${_ret}
}

# This is shorter than constantly writing the printf command
msg() {
	local _msg=$1

	printf '%s\n' "$_msg"
}

# Download the tarball
get_tarball() {
	local _file="miniroot${VERSION}.tgz"

	msg "Fetching ${_file}..."
	unpriv -f "${TMP}/${_file}" "wget -q --show-progress -P ${TMP} -O ${_file} ${URL}/${_file}"
}

# Extract miniroot.tgz
extract() {
	tar xzpvf "${TMP}/miniroot${VERSION}.tgz" --xattrs --xattrs-include='*' --numeric-owner -C /mnt
}

# Set up fstab
gfstab() {
	msg "Generating fstab entries..."
	genfstab -U /mnt >> /mnt/etc/fstab
}

# Copy network files
set_net() {
	msg "Setting up network interfaces"
	# Copy /etc/resolv.conf to the chroot, temporarily
	/usr/bin/cp /etc/resolv.conf /mnt/etc/resolv.conf

	# copy interfaces files.
	/usr/bin/mkdir -p /mnt/etc/network
	/usr/bin/cp /etc/network/interfaces /mnt/etc/network/
	/usr/bin/cp -r /etc/network/interfaces.d/ /mnt/etc/network/
}

# Refresh the repository
refresh_repo() {
	arch-chroot /mnt apt-get update
}

# Setting the timezone
set_tz() {
	 arch-chroot /mnt dpkg-reconfigure tzdata
}

# Setup /etc/hosts and /etc/hostname
set_hosts() {
	local _resp

	read -r _resp?"Enter the hostname of the machine: "
	msg "$_resp" > /mnt/etc/hostname
	msg "127.0.0.1   localhost
127.0.1.1   $_resp


# IPv6
::1         localhost ip6-localhost ip6-loopback
ff02::1     ip6-allnodes
ff02::2     ip6-allrouters" > /mnt/etc/hosts
}

# Set locales and keyboard config
set_lokb() {
	msg "Setting up locales and keyboard config..."
	arch-chroot /mnt apt-get install locales -y
	arch-chroot /mnt dpkg-reconfigure locales
	arch-chroot /mnt apt-get install console-setup -y
}

# Set root password
set_rootpass() {
	msg "Password for the root account (will not echo): "
	arch-chroot /mnt passwd
}

# Setup a default user name and password
set_user() {
	local _resp

	read -r _resp?"Name of default user: "
	arch-chroot /mnt useradd -m -s /bin/ksh "$_resp"
	arch-chroot /mnt usermod -aG wheel,cdrom,floppy,audio,dip,video,plugdev,netdev "$_resp"

	msg "Password for $_resp (will not echo): "
	arch-chroot /mnt/ passwd "$_resp"
}

inst_kern() {
	# First, install Debian's standard kernel as a back up.
	arch-chroot /mnt/ apt-get install linux-image-amd64
	arch-chroot /mnt/ kernupd
}

# Let user decide which set(s) to install.
# NOTE: This will need to be tested on its own first.
install_sets() {
	local _resp _sets

	read -r _resp?"The following sets will be installed:
[x] base    | The base system.
[x] devel   | The git, build-essential and LLVM/Clang toolchain.
[x] xfonts  | Extra fonts for xserv.
[x] xprogs  | Window Managers (Raven, cwm) + ragnarok-terminal and dmenu.
[x] xserv   | Minimal xorg + xinit.

To omit one or more set, simply type <setname> (e.g. xfonts, or xfonts xprogs xserv). Then press Return to install the sets: "

	# If no set was deselected, proceed, else remove deselected first.
	if [[ -z $_resp ]]; then
		_resp="all"
	fi

	case "$_resp" in
		all)	msg "Installing all sets."
			;;
		*)	for _set in $_resp; do
				sed -i -e "s/ $_set//g" install.conf
			done
			;;
	esac

	set -A _sets -- $(sed -n 's/Sets = //p' install.conf)
	for _set in "${_sets[@]}"; do
		arch-chroot /mnt/ /usr/bin/apt-get install "$_set"
	done
}

# Setup grub
set_grub() {
	local _resp

	msg "Installing grub..."
	if [ -d "$1"/boot/efi ]; then
		# Install grub-efi
		arch-hroot /mnt/ apt-get install grub-efi-amd64
		arch-chroot /mnt/ grub-install --target=x86_64-efi \
			--efi-directory=/boot/efi
	else
		# Install grub-pc
		arch-chroot /mnt/ apt-get install grub
		msg "Listing available devices..."
		arch-chroot /mnt/ lsblk
		read -r _resp?"Which device should the bootloader be installed on? (e.g. /dev/sdX) "
		arch-chroot /mnt/ grub-install "$_resp"
	fi
	arch-chroot /mnt/ update-grub
}

# Cleanup.
cleanup() {
	msg "Cleaning up..."
	rm /mnt/etc/resolv.conf
	arch-chroot /mnt apt clean
	rm -rf /mnt/var/lib/apt/lists/*
	rm /mnt/var/log/apt/eipp.log.xz
	rm /mnt/var/log/apt/history.log
	rm /mnt/var/log/apt/term.log
	rm /mnt/var/log/alternatives.log
	rm /mnt/var/log/dpkg.log
	rm /mnt/etc/resolv.conf
	rm /mnt/tmp/*
	for _file in /etc/machine-id /var/lib/dbus/machine-id; do
		if [ -f /mnt/"${_file}" ]; then
			rm /mnt/"${_file}"
		fi
	done
}

# Finishing touch
finish() {
	local _resp

	read -r _resp?"Installation complete. Type r (to reboot) or e (to exit and stay in the live session) then Return. "

	case "$_resp" in
		r)	loginctl reboot
			;;
		e)	exit 0
			;;
		*)	loginctl reboot
			;;
	esac
}

main() {
	get_tarball
	extract
	gfstab
	set_net
	refresh_repo
	set_tz
	set_hosts
	set_lokb
	set_rootpass
	set_user
	inst_kern
	install_sets
	set_grub
	cleanup
}

main 2>&1 | tee install.log
/usr/bin/mkdir -p /mnt/var/messages
/usr/bin/cp install.log /mnt/var/messages/
finish
