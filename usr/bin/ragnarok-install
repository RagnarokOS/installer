#!/bin/ksh

# Main installer script.
# $Ragnarok: ragnarok-install,v 1.77 2024/09/03 15:17:21 lecorbeau Exp $

set -e

. /usr/lib/ragnarok-installer/funcs

CONF=${CONF:-install.conf}
INSTALLTYPE=${INSTALLTYPE:-netinstall}
TMP=$(mktemp -d -p /tmp ragnarok-install.XXXXXXXXXX)
# Parse config values
MIRROR="https://github.com/RagnarokOS/distrib/releases/download/"
VERSION="01"
URL="${MIRROR}${VERSION}"

# Never download stuff off the internet as the root user.
# I take no credit for this function. All credit goes to
# Antoine Jacoutot, who wrote OpenBSD's syspatch(1).
unpriv() {
	local _file=$2 _ret=0 _user=_apt

	if [[ $1 == -f && -n ${_file} ]]; then
		# shellcheck disable=SC2188
		>${_file}
		chown "${_user}" "${_file}"
		chmod 0711 "${TMP}"
		shift 2
	fi
	(($# >= 1))

	su -s /bin/sh ${_user} -c "$@" || _ret=$?

	[[ -n ${_file} ]] && chown root "${_file}"

	return ${_ret}
}

## Funcs to ask questions (these may end up being moved to
## lib/ragnarok-install/funcs down the line.

# Ask conf question and store _answer as a variable.
ask() {
	local _q=$1 _resp

	read -r _resp?"$_q "
	_answer="$_resp"
}

# For some questions, lists of available choices need to be provided.
# $1 is the question
# $2 is the list
ask_q() {
	local _resp _q=$1 _list=$2

	read -r _resp?"$_q "
	case "$_resp" in
		l)	less --prompt="/ to search, j/k to navigate, q to quit, h for help " .local/src/ragnarok/installer/usr/share/ragnarok-installer/lists/"$_list".list; ask_q "$@"
			;;
		*)	_answer="$_resp"
			;;
	esac
}

# Ask for password. We ask for the passwords and username here because
# we're not going to store passwords unencrypted in install.conf.
# Much like unpriv(), I take no credit for ask_pass/ask_password. All
# credits go to the creator(s) of the OpenBSD installer.
ask_pass() {
	stty -echo
	IFS= read -r _resp?"$1 "
	stty echo
	echo
}

ask_password() {
	local _q=$1 _resp

	while :; do
		ask_pass "$_q (will not echo)"
		_password=$_resp

		ask_pass "$_q (again)"
		[[ $_resp == "$_password" ]] && break

		echo "Passwords don't match, try again."
	done
}

# Now ask the questions
user_setup() {
	local _resp

	ask_password "Password for the root account?"
	_rootpass="$_password"

	read -r _Yn?"Setup a default user? [Y/n]: "
	case "$_Yn" in
		n|N)	return
			;;
		*)	ask "Name of the default user? "
			_username="$_answer"
			ask_password "Password for ${_username}"
			_userpass="$_password"
			;;
	esac
}

### Funcs to actually install the system.

# Partition the device
part_dev() {
	local _dev _mode _swap _root _home _homesize _bootparttype

	_dev=$(get_val Device "$CONF")
	_mode=$(get_val Bootmode "$CONF")
	_swap=$(get_val Swap "$CONF")
	_root=$(get_val Root "$CONF")
	_home=$(get_val Home "$CONF")

	# Wipe device
	sfdisk --delete "$_dev"

	# Set the proper part table (mbr for bios, GPT for EFI).
	case "$_mode" in
		bios)
			(echo o) | fdisk "$_dev"
			_bootparttype="L"
			;;
		efi)
			(echo g) | fdisk "$_dev"
			_bootparttype="U"
			;;
	esac

	# Home may be left empty to use the remaining space, so
	# handle it properly.
	if [[ -z $_home ]]; then
		_homsesize="+"
	else
		_homesize="${_home}"
	fi

	printf '%s\n' "start=2048, size=500M, type=$_bootparttype
	size=${_swap}, type=S
	size=${_root}, type=L
	size=${_homesize}, type=L" | sfdisk "${_dev}"

	# Set bootable flag on partition 1.
	case "$_mode" in
		bios)	sfdisk -A "$_dev" 1
			;;
		efi)	sfdisk --part-type "$_dev" 1 U
			;;
	esac
}

# Create filesystems and mount the device
mount_dev() {
	local _dev _mode

	_dev=$(get_val Device "$CONF")
	_mode=$(get_val Bootmode "$CONF")

	case "$_mode" in
		bios)
			mkfs.ext4 "${_dev}1"
			;;
		efi)
			mkfs.vfat -F 32 "${_dev}1"
			;;
	esac
	mkswap "${_dev}2"
	# mkfs will ask to proceed anyway unless -F is used.
	mkfs.ext4 -F "${_dev}3"
	mkfs.ext4 -F "${_dev}4"

	swapon "${_dev}2"
	mount -t ext4 -o errors=remount-ro "${_dev}3" /mnt
	mkdir -p /mnt/{boot,home}
	mount -t ext4 -o defaults "${_dev}4" /mnt/home
	case "$_mode" in
		bios)
			mount -t ext4 -o noexec,nosuid,nodev "${_dev}1" /mnt/boot
			;;
		efi)
			mkdir -p /mnt/boot/efi
			mount -t vfat -o umask=0077,noexec,nosuid,nodev "${_dev}1" /mnt/boot/efi
			;;
	esac
}

# Download the tarball
get_tarball() {
	local _file="base${VERSION}.tgz"

	msg "Fetching ${_file}..."
	unpriv -f "${TMP}/${_file}" "wget -q --show-progress -P ${TMP} -O ${_file} ${URL}/${_file}"
}

# Extract base tarball.
extract() {
	msg "Extracting the base system..."
	tar xzpvf "${TMP}/base${VERSION}.tgz" --xattrs --xattrs-include='*' --numeric-owner -C /mnt
}

# Set up fstab
gfstab() {
	msg "Generating fstab entries..."
	genfstab -U /mnt >> /mnt/etc/fstab
}

# Copy network files
set_net() {
	msg "Setting up network interfaces..."
	# Copy /etc/resolv.conf to the chroot, temporarily
	/usr/bin/cp /etc/resolv.conf /mnt/etc/resolv.conf

	# copy interfaces files.
	/usr/bin/mkdir -p /mnt/etc/network
	/usr/bin/cp /etc/network/interfaces /mnt/etc/network/

	# Copy /etc/network/interfaces.d/ if there's anything in it.
	if [[ -z $(find /mnt/etc/network/interfaces.d/ -prune -empty 2>/dev/null) ]]; then
		/usr/bin/cp -r /etc/network/interfaces.d/ /mnt/etc/network/
	fi
}

# Refresh the repository
refresh_repo() {
	msg "Updating repo..."
	arch-chroot /mnt apt-get update
}

# Finishing touch
finish() {
	local _resp

	read -r _resp?"Installation complete. Type r (to reboot) or e (to exit and stay in the live session) then Return. "

	case "$_resp" in
		r)	loginctl reboot
			;;
		e)	exit 0
			;;
		*)	loginctl reboot
			;;
	esac
}

main() {
	part_dev
	mount_dev
	finish
}

main 2>&1 | tee install.log
/usr/bin/mkdir -p /mnt/var/messages
/usr/bin/cp install.log /mnt/var/messages/
finish
